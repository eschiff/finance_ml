ext {
    projectName = 'finance-ml'
    baseImageTag = '0.1.0'
    dataDir = "${project.projectDir}/data"
    modelDir = "${project.projectDir}/models"
    workDir = "/app"
}

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getGitBranchName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getBuildImageTag = { ->
    def branchName = getGitBranchName().replaceAll('[_/]', '-')
    def gitHash = getGitHash()
    def versionTemplate = "${project.ext.baseImageTag}-${branchName}.${gitHash}"

    def buildImageRepositoryTag = "${project.ext.projectName}:${versionTemplate}"
    return buildImageRepositoryTag
}

def identifyContainers = { filter ->
    def stdout = new ByteArrayOutputStream()

    project.exec{
        standardOutput = stdout
        commandLine 'bash', '-c', "for image in \$(docker image ls -qf reference=$filter | sort | uniq); do docker ps -qf ancestor=\$image; done"
    }

    List containersFound = (stdout.toString().trim().split("\n") as List)
    containersFound.removeAll([""])
    println "Found ${containersFound.size()} containers using filter: ${filter}"
    return containersFound
}

def stopContainers = { containers ->
    for (String containerId in containers){
        println "Stopping container ${containerId}"

        project.exec{
          executable 'docker'
          args "stop", containerId
        }
    }
}

task("buildImage", type: Exec) {
    executable 'docker'

    doFirst {
        args = ["build",
                "-f", "Dockerfile",
                "--rm",
                "-t", "${getBuildImageTag()}",
                project.projectDir
        ]
    }
}

task("debug", type: Exec, dependsOn: ["buildImage", "stop"]) {
    def stdout = new ByteArrayOutputStream()
    standardOutput = stdout

    executable 'docker'
    doFirst {
        args = ["run", "-d",
                "-v", "${project.ext.dataDir}:${project.ext.workDir}/data",
                "--entrypoint", "bash",
                "-t", "${getBuildImageTag()}",
                "-s"]
    }

    // Create a debug executable file
    doLast {
        def debugImageId = stdout.toString().trim()
        def debugCommand = "docker exec -it"
        def debugEntrypoint = "bash"
        def debugFile = new File("debug")
        debugFile.text = "${debugCommand} ${debugImageId} ${debugEntrypoint}"
        debugFile.setExecutable(true, false)
    }
}

task("test", type: Exec, dependsOn: "buildImage") {
    executable "docker"

    doFirst {
        def pytestCommand = [
          "pytest",
          "finance_ml",
          "--disable-pytest-warnings",
          "--cov", "finance_ml",
          "--cov-report", "term-missing",
          "-m", "not integration",
          "-vv"
        ]

        def testRunArgs = ["run", "--rm", "${getBuildImageTag()}"] + pytestCommand
        if (project.hasProperty('args')) {
            // Allow users to pass in parameters to pytest.
            // Example usage: `gradle test -Pargs="-s -k test_manifest.py"`
            testRunArgs.addAll(project.property('args').split(' '))
        }
        args testRunArgs
    }
}

task("stop") {
    doFirst {
        def image = "${project.ext.projectName}"
        stopContainers(identifyContainers(image))
    }
}

task("update_db", type: Exec, dependsOn: "buildImage") {
    executable 'docker'
    doFirst {
        def runArgs = ["run", "--rm",
                "-v", "${project.ext.dataDir}:${project.ext.workDir}/data",
                "-t", "${getBuildImageTag()}",
                "${project.ext.workDir}/finance_ml/scripts/update_quarterly_db"]

        if (project.hasProperty('args')) {
            // Allow users to pass in parameters to update_db.
            // Example usage: `./gradlew update_db -Pargs="AAPL AMZN"`
            runArgs.addAll(project.property('args').split(' '))
        }

        args runArgs
    }
}

task("train", type: Exec, dependsOn: "buildImage") {
    executable 'docker'
    doFirst {
        def runArgs = ["run", "--rm",
                "-v", "${project.ext.dataDir}:${project.ext.workDir}/data",
                "-v", "${project.ext.modelDir}:${project.ext.workDir}/models",
                "-t", "${getBuildImageTag()}",
                "${project.ext.workDir}/finance_ml/scripts/train_and_evaluate"]

        if (project.hasProperty('args')) {
            // Allow users to pass in hyperparameters to training
            // Example usage: `./gradlew train -Pargs="NUM_QUARTERS_FOR_TRAINING=12 N_QUARTERS_OUT_TO_PREDICT=4"`
            runArgs.addAll(project.property('args').split(' '))
        }

        args runArgs
    }
}
